Projet final

Python pour les Tests d’Intrusion

Master 1 SAS

Dr. ATTA Amanvon Ferdinand

Ann´ee acad´emique 2025-2026

- Avertissement Critique

AVERTISSEMENT L ´EGAL ET ´ETHIQUE CRITIQUE
RESTRICTIONS ABSOLUES :

— Uniquement sur machines virtuelles d´edi´ees et isol´ees

— Jamais sur syst`emes de production ou infrastructures r´eelles

— Logging complet : Toutes les actions sont trac´ees et auditables

TOUT USAGE NON AUTORIS ´E CONSTITUE UNE INFRACTION P ´ENALE GRAVE
Les techniques enseign´ees visent `a comprendre les m´ecanismes d’attaque syst`eme pour mieux
concevoir des d´efenses robustes. L’usage malveillant engage la responsabilit´e p´enale et civile de
l’utilisateur.

3
3
3
3
3
3
4
4
5
5
6
7
7
7
8
8
11
11
11
17
17
18
18
18

19
19
19
20

20
20
20

Projet final

Table des mati`eres

1 Projet Final - Framework Modulaire de Test d’Intrusion

Master 1 SAS

.

.

.

.

.

1.3

1.1 Pr´esentation du projet .

1.1.1 Contexte et objectifs .
1.1.2 Dur´ee et modalit´es .

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . .
1.2 Cahier des charges technique . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.2.1 Exigences fonctionnelles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.2.2 Architecture technique . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.2.3 Exigences non-fonctionnelles
. . . . . . . . . . . . . . . . . . . . . . . . . . .
Interface en ligne de commande . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.3.1 Commandes principales
Syst`eme de configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.3.2
1.4
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.
IHM .
1.5 Syst`eme de logging et trac¸abilit´e . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.5.1 Architecture du logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.6 Gestion des r´esultats et base de donn´ees . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.
Format du rapport technique . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.7.1
1.7.2 Template de rapport automatis´e . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.
1.9.1
Structure de la documentation . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.9.2 Exemple de README.md . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

1.8 Tests unitaires et validation .
Framework de tests .
.

Stockage des r´esultats
.

1.9 Documentation technique .

1.7 G´en´eration de rapports

1.8.1

1.6.1

.

.

.

.

.

.

.

.

.

.

.

.

2 Crit`eres d’´evaluation

2.1 Grille d’´evaluation d´etaill´ee .
2.2 Crit`eres de bonus .
.
2.3 P´enalit´es .
.
.

.
.

.
.

.
.

.
.

.

.

.

.

. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3 Modalit´es de soutenance

3.1 D´eroulement de la soutenance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

Format de pr´esentation .

3.1.1

2

Projet final

Master 1 SAS

1 Projet Final - Framework Modulaire de Test d’Intrusion

1.1 Pr´esentation du projet

1.1.1 Contexte et objectifs

Le projet final consiste `a d´evelopper un framework modulaire de test d’intrusion qui int`egre l’en-
semble des comp´etences acquises durant les TP1 `a TP6. Ce framework doit ˆetre capable de r´ealiser un
audit de s´ecurit´e complet, de la reconnaissance initiale jusqu’`a l’exploitation et la g´en´eration de rapports.

(cid:242) Information

Objectifs du projet

— Int´egrer tous les modules d´evelopp´es dans les TP1-6

— Cr´eer une architecture modulaire et extensible

— D´evelopper une IHM et une interface en ligne professionnelle

— Automatiser le workflow complet de test d’intrusion

— G´en´erer des rapports techniques et ex´ecutifs

— Respecter les standards de s´ecurit´e et d’´ethique

1.1.2 Dur´ee et modalit´es

— Deadline : 31/10/2025

— Modalit´e : Projet en groupe

— Soutenance : Pr´esentation de 20 minutes + 10 minutes de questions

— Livrables :

— Code source complet du framework

— Rapport technique (15-20 pages)

— Documentation utilisateur

— D´emonstration vid´eo (optionnelle, bonus)

1.2 Cahier des charges technique

1.2.1 Exigences fonctionnelles

Le framework doit impl´ementer les modules suivants :

Module
Reconnaissance

Scanning r´eseau
D´etection web

Fonctionnalit´es requises
OSINT, DNS enumeration, subdomain discovery,
WHOIS
Port scanning, service detection, OS fingerprinting
Crawling, vulnerability scanning (SQLi, XSS, LFI,
etc.)
Validation automatique, g´en´eration de PoC

Exploitation web
Exploitation syst`eme Buffer overflow, shellcode, reverse shells
Reporting

G´en´eration JSON, HTML, PDF

TABLE 1 – Modules fonctionnels requis

3

Projet final

Master 1 SAS

1.2.2 Architecture technique

Le framework doit respecter l’architecture suivante :

# Configuration globale
# Syst`eme de logging
# Gestion des r´esultats

# TP2

# TP3

# TP4

# TP5

# TP6

|---- __init__.py
|---- scanner.py
`---- enumeration.py

|---- __init__.py
|---- config.py
|---- logger.py
`---- database.py

|---- reconnaissance/
|---- __init__.py
|
|---- osint.py
|
|
`---- passive.py
|---- network/
|
|
|
|---- web/
|
|
|
|
`---- system/

# Architecture du framework
penetration_testing_framework/
|---- core/
|
|
|
|
|---- modules/
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|
|---- utils/
|
|
|
|---- reporting/
|
|
|
|---- tests/
|
|
|---- main.py
|---- requirements.txt
`---- README.md

|---- __init__.py
|---- report_generator.py
`---- templates/

|---- __init__.py
|---- crawler.py
|---- scanner.py
`---- exploiter.py

|---- __init__.py
|---- network_utils.py
`---- file_utils.py

|---- __init__.py
|---- exploiter.py
`---- shells.py

|---- __init__.py
`---- test_*.py

# Point d’entr´ee

1.2.3 Exigences non-fonctionnelles

— Modularit´e : Chaque module doit ˆetre ind´ependant et r´eutilisable
— Extensibilit´e : Possibilit´e d’ajouter de nouveaux modules facilement
— Performance : Support du multi-threading pour les scans
— Robustesse : Gestion d’erreurs compl`ete avec retry mechanisms
— S´ecurit´e : Logging de toutes les actions, validation des entr´ees
— Documentation : Code comment´e, docstrings Python, README complet

4

Projet final

Master 1 SAS

1.3

Interface en ligne de commande

1.3.1 Commandes principales

Le framework doit fournir une interface CLI intuitive :

1 # Scan complet
2 python main.py scan --target example.com --full
3
4 # Reconnaissance uniquement
5 python main.py recon --target example.com --osint
6
7 # Scan r´eseau
8 python main.py network --target 192.168.1.0/24 --ports 1-1000
9
10 # Scan web
11 python main.py web --url http://example.com --crawl --scan
12
13 # Exploitation
14 python main.py exploit --target example.com --auto
15
16 # G´en´eration de rapport
17 python main.py report --session-id abc123 --format pdf
18
19 # Configuration
20 python main.py config --set threads=20 --set timeout=30

5

Projet final

Master 1 SAS

1.3.2 Syst`eme de configuration

(cid:212) Exercice

Impl´ementation requise - Syst`eme de configuration
D´eveloppez un syst`eme de configuration flexible supportant :

— Fichiers de configuration JSON/YAML

— Variables d’environnement

— Arguments en ligne de commande

— Configuration par d´efaut

Exemple de fichier de configuration :

{

"global": {

"threads": 10,
"timeout": 30,
"user_agent": "PenTest-Framework/1.0",
"output_dir": "./results"

},
"reconnaissance": {

"osint_enabled": true,
"subdomain_bruteforce": true,
"dns_enumeration": true

},
"network": {

"port_range": "1-65535",
"scan_type": "syn",
"os_detection": true

},
"web": {

"crawl_depth": 3,
"max_pages": 500,
"scan_forms": true,
"test_all_parameters": true

},
"exploitation": {

"auto_exploit": false,
"generate_poc": true,
"safe_mode": true

},
"reporting": {

"formats": ["json", "html", "pdf"],
"include_screenshots": false,
"executive_summary": true

}

}

6

Projet final

1.4

IHM

Master 1 SAS

Pour l’IHM, le soin est laiss´e au groupe de pr´esenter comme il le souhaite et en utilisant la bi-

blioth`eque de son choix(tkinter, pyqt, etc..)

1.5 Syst`eme de logging et trac¸abilit´e

1.5.1 Architecture du logging

Le framework doit impl´ementer un syst`eme de logging complet :

# Configuration du logger principal
self.logger = logging.getLogger(’PentestFramework’)
self.logger.setLevel(logging.DEBUG)

# Handler pour fichier avec rotation
from logging.handlers import RotatingFileHandler

def __init__(self, log_dir: str = "./logs"):

"""Logger centralis´e pour le framework"""

self.log_dir = Path(log_dir)
self.log_dir.mkdir(exist_ok=True)

1 #!/usr/bin/env python3
2 """
3 Syst`eme de logging centralis´e pour le framework
4 Support de plusieurs niveaux et destinations
5 """
6 import logging
7 import json
8 from datetime import datetime
9 from pathlib import Path
10 from typing import Dict, Any
11
12 class PentestLogger:
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52

file_handler = RotatingFileHandler(
self.log_dir / ’framework.log’,
maxBytes=10*1024*1024, # 10MB
backupCount=5

self.logger.addHandler(file_handler)
self.logger.addHandler(console_handler)

file_handler.setFormatter(formatter)
console_handler.setFormatter(formatter)

)
file_handler.setLevel(logging.DEBUG)

# Format d´etaill´e
formatter = logging.Formatter(

details: Dict[str, Any]):

# Handler pour console
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)

)

def log_action(self, action: str, target: str,

# Fichier d’audit s´epar´e
self.audit_file = self.log_dir / ’audit.jsonl’

’%(asctime)s - %(name)s - %(levelname)s - %(message)s’

7

Projet final

Master 1 SAS

53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87

"""Log une action avec d´etails"""

audit_entry = {

’timestamp’: datetime.now().isoformat(),
’action’: action,
’target’: target,
’details’: details

}

# Log dans le fichier d’audit
with open(self.audit_file, ’a’) as f:

f.write(json.dumps(audit_entry) + ’\n’)

# Log dans le logger principal
self.logger.info(f"{action} on {target}")

def log_scan_start(self, scan_type: str, target: str):

"""Log le d´emarrage d’un scan"""
self.log_action(’SCAN_START’, target, {’type’: scan_type})

def log_vulnerability(self, vuln_type: str, target: str,
severity: str):

"""Log une vuln´erabilit´e d´etect´ee"""
self.log_action(’VULNERABILITY’, target, {

’type’: vuln_type,
’severity’: severity

})

def log_exploitation(self, exploit_type: str, target: str,

success: bool):

"""Log une tentative d’exploitation"""
self.log_action(’EXPLOITATION’, target, {

’type’: exploit_type,
’success’: success

})

1.6 Gestion des r´esultats et base de donn´ees

1.6.1 Stockage des r´esultats

Le framework doit stocker tous les r´esultats de mani`ere structur´ee :

1 #!/usr/bin/env python3
2 """
3 Syst`eme de gestion des r´esultats
4 Base de donn´ees SQLite pour stockage persistent
5 """
6 import sqlite3
7 import json
8 from datetime import datetime
9 from typing import List, Dict, Any
10
11 class ResultDatabase:
12
13
14
15
16
17
18
19
20
21

self.db_path = db_path
self.conn = sqlite3.connect(db_path)
self.create_tables()

"""Cr´ee les tables n´ecessaires"""

def create_tables(self):

"""Gestionnaire de base de donn´ees des r´esultats"""

def __init__(self, db_path: str = "./results/pentest.db"):

8

Projet final

Master 1 SAS

22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84

cursor = self.conn.cursor()

# Table des sessions
cursor.execute(’’’

CREATE TABLE IF NOT EXISTS sessions (
session_id TEXT PRIMARY KEY,
target TEXT NOT NULL,
start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
end_time TIMESTAMP,
status TEXT DEFAULT ’running’,
config TEXT

)

’’’)

# Table des scans
cursor.execute(’’’

CREATE TABLE IF NOT EXISTS scans (

scan_id INTEGER PRIMARY KEY AUTOINCREMENT,
session_id TEXT,
scan_type TEXT NOT NULL,
target TEXT NOT NULL,
start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
end_time TIMESTAMP,
results TEXT,
FOREIGN KEY (session_id) REFERENCES sessions(session_id)

)

’’’)

# Table des vuln´erabilit´es
cursor.execute(’’’

CREATE TABLE IF NOT EXISTS vulnerabilities (

vuln_id INTEGER PRIMARY KEY AUTOINCREMENT,
session_id TEXT,
scan_id INTEGER,
vuln_type TEXT NOT NULL,
severity TEXT NOT NULL,
target TEXT NOT NULL,
description TEXT,
evidence TEXT,
remediation TEXT,
discovered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (session_id) REFERENCES sessions(session_id),
FOREIGN KEY (scan_id) REFERENCES scans(scan_id)

)

’’’)

# Table des exploitations
cursor.execute(’’’

CREATE TABLE IF NOT EXISTS exploitations (

exploit_id INTEGER PRIMARY KEY AUTOINCREMENT,
session_id TEXT,
vuln_id INTEGER,
exploit_type TEXT NOT NULL,
target TEXT NOT NULL,
success BOOLEAN NOT NULL,
proof_of_concept TEXT,
executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (session_id) REFERENCES sessions(session_id),
FOREIGN KEY (vuln_id) REFERENCES vulnerabilities(vuln_id)

)

’’’)

self.conn.commit()

9

Projet final

Master 1 SAS

85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147

def create_session(self, session_id: str, target: str,

config: Dict[str, Any]) -> str:

"""Cr´ee une nouvelle session"""

cursor = self.conn.cursor()
cursor.execute(’’’

INSERT INTO sessions (session_id, target, config)
VALUES (?, ?, ?)

’’’, (session_id, target, json.dumps(config)))

self.conn.commit()
return session_id

def add_vulnerability(self, session_id: str, vuln_data: Dict[str, Any]):

"""Ajoute une vuln´erabilit´e"""

cursor = self.conn.cursor()
cursor.execute(’’’

INSERT INTO vulnerabilities
(session_id, vuln_type, severity, target, description,

evidence, remediation)

VALUES (?, ?, ?, ?, ?, ?, ?)

’’’, (

session_id,
vuln_data[’type’],
vuln_data[’severity’],
vuln_data[’target’],
vuln_data.get(’description’, ’’),
json.dumps(vuln_data.get(’evidence’, {})),
vuln_data.get(’remediation’, ’’)

))

self.conn.commit()

def get_session_results(self, session_id: str) -> Dict[str, Any]:

"""R´ecup`ere tous les r´esultats d’une session"""

cursor = self.conn.cursor()

# Informations de session
cursor.execute(’’’

SELECT * FROM sessions WHERE session_id = ?

’’’, (session_id,))

session = cursor.fetchone()

# Vuln´erabilit´es
cursor.execute(’’’

SELECT * FROM vulnerabilities WHERE session_id = ?

’’’, (session_id,))

vulnerabilities = cursor.fetchall()

# Exploitations
cursor.execute(’’’

SELECT * FROM exploitations WHERE session_id = ?

’’’, (session_id,))

exploitations = cursor.fetchall()

return {

’session’: session,

10

Master 1 SAS

Projet final

148
149
150

}

’vulnerabilities’: vulnerabilities,
’exploitations’: exploitations

1.7 G´en´eration de rapports

1.7.1 Format du rapport technique

Le rapport technique doit suivre la structure impos´ee suivante :

Section
R´esum´e ex´ecutif
Analyse des besoins
Conception
Impl´ementation
Tests et validation
Analyse critique
Annexes

Pages
1
2-3
3-4
4-5
2-3
2-3

Contenu
Vue d’ensemble, risques majeurs
Objectifs, scope, contraintes
Architecture, choix techniques
Modules, algorithmes, code
Sc´enarios de test, r´esultats
Limites, am´eliorations futures

Variable Code source, captures, r´ef´erences

TABLE 2 – Structure du rapport technique

1.7.2 Template de rapport automatis´e

def __init__(self, session_id: str, results: Dict[str, Any]):

self.session_id = session_id
self.results = results
self.output_dir = Path(f"./reports/{session_id}")
self.output_dir.mkdir(parents=True, exist_ok=True)

"""G´en´erateur de rapports multi-formats"""

1 #!/usr/bin/env python3
2 """
3 G´en´erateur de rapports automatis´e
4 Support de plusieurs formats (JSON, HTML, PDF)
5 """
6 from typing import Dict, Any, List
7 from datetime import datetime
8 import json
9 from pathlib import Path
10
11 class ReportGenerator:
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35

self.generate_json()
self.generate_html()
self.generate_executive_summary()

"""G´en`ere un rapport JSON d´etaill´e"""

def generate_json(self):

def generate_all(self):

report_data = {

’metadata’: {

"""G´en`ere tous les formats de rapport"""

print(f"[+] Reports generated in {self.output_dir}")

’session_id’: self.session_id,
’generated_at’: datetime.now().isoformat(),

11

Projet final

Master 1 SAS

}

body {{

36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58 <!DOCTYPE html>
59 <html>
60 <head>
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98

}}
th {{

}}
.header {{

}}
.section {{

’framework_version’: ’1.0.0’

},
’target’: self.results.get(’target’, ’’),
’summary’: self._generate_summary(),
’reconnaissance’: self.results.get(’reconnaissance’, {}),
’network_scan’: self.results.get(’network’, {}),
’web_vulnerabilities’: self.results.get(’web_vulns’, []),
’system_vulnerabilities’: self.results.get(’system_vulns’, []),
’exploitations’: self.results.get(’exploitations’, [])

output_file = self.output_dir / ’report.json’

with open(output_file, ’w’) as f:

json.dump(report_data, f, indent=2, default=str)

print(f"[+] JSON report: {output_file}")

def generate_html(self):

"""G´en`ere un rapport HTML interactif"""

html_template = f’’’

<title>Penetration Testing Report - {self.session_id}</title>
<style>

font-family: Arial, sans-serif;
margin: 20px;
background: #f5f5f5;

background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
color: white;
padding: 30px;
border-radius: 10px;
text-align: center;

background: white;
padding: 20px;
margin: 20px 0;
border-radius: 5px;
box-shadow: 0 2px 5px rgba(0,0,0,0.1);

}}
.critical {{ color: #dc3545; font-weight: bold; }}
.high {{ color: #fd7e14; font-weight: bold; }}
.medium {{ color: #ffc107; font-weight: bold; }}
.low {{ color: #28a745; font-weight: bold; }}
table {{

width: 100%;
border-collapse: collapse;
margin: 15px 0;

}}
th, td {{

border: 1px solid #ddd;
padding: 12px;
text-align: left;

background-color: #667eea;
color: white;

12

Projet final

Master 1 SAS

<h1>Penetration Testing Report</h1>
<p>Session: {self.session_id}</p>
<p>Generated: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>

}}

</div>

</div>

</div>

</div>

</div>

</style>

<div class="header">

<div class="section">

<div class="section">

<div class="section">

<div class="section">

<h2>Executive Summary</h2>
{self._generate_html_summary()}

<h2>Exploitation Results</h2>
{self._generate_html_exploitations()}

<h2>Vulnerabilities Discovered</h2>
{self._generate_html_vulnerabilities()}

<h2>Recommendations</h2>
{self._generate_html_recommendations()}

99
100
101 </head>
102 <body>
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128 </body>
129 </html>
130
131
132
133
134
135
136
137
138
139
140
141
142
143 PENETRATION TESTING - EXECUTIVE SUMMARY
144 Session: {self.session_id}
145 Date: {datetime.now().strftime("%Y-%m-%d")}
146
147 TARGET INFORMATION
148 Target: {self.results.get(’target’, ’N/A’)}
149 Scope: {self.results.get(’scope’, ’N/A’)}
150
151 RISK ASSESSMENT
152 Overall Risk Level: {self._calculate_risk_level()}
153 Critical Vulnerabilities: {self._count_by_severity(’CRITICAL’)}
154 High Vulnerabilities: {self._count_by_severity(’HIGH’)}
155 Medium Vulnerabilities: {self._count_by_severity(’MEDIUM’)}
156 Low Vulnerabilities: {self._count_by_severity(’LOW’)}
157
158 KEY FINDINGS
159 {self._generate_key_findings()}
160
161 IMMEDIATE ACTIONS REQUIRED

output_file = self.output_dir / ’report.html’

print(f"[+] HTML report: {output_file}")

def generate_executive_summary(self):

with open(output_file, ’w’) as f:

"""G´en`ere un r´esum´e ex´ecutif"""

f.write(html_template)

summary = f’’’

’’’

13

Projet final

Master 1 SAS

output_file = self.output_dir / ’executive_summary.txt’

with open(output_file, ’w’) as f:

’’’

f.write(summary)

162 {self._generate_immediate_actions()}
163
164 COMPLIANCE IMPACT
165 {self._generate_compliance_assessment()}
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186

return {

print(f"[+] Executive summary: {output_file}")

def _generate_summary(self) -> Dict[str, Any]:

"""G´en`ere un r´esum´e des r´esultats"""

’total_vulnerabilities’: len(self.results.get(’web_vulns’, [])) +
len(self.results.get(’system_vulns’, [])),

’critical_count’: self._count_by_severity(’CRITICAL’),
’high_count’: self._count_by_severity(’HIGH’),
’medium_count’: self._count_by_severity(’MEDIUM’),
’low_count’: self._count_by_severity(’LOW’),
’exploitations_attempted’: len(self.results.get(’exploitations’, [])),
’exploitations_successful’: len([e for e in self.results.get(’

187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223

exploitations’, [])

}

if e.get(’success’)])

def _count_by_severity(self, severity: str) -> int:
"""Compte les vuln´erabilit´es par s´ev´erit´e"""

web_vulns = self.results.get(’web_vulns’, [])
system_vulns = self.results.get(’system_vulns’, [])

count = 0

for vuln in web_vulns + system_vulns:

if vuln.get(’severity’) == severity:

count += 1

return count

def _calculate_risk_level(self) -> str:

"""Calcule le niveau de risque global"""

critical = self._count_by_severity(’CRITICAL’)
high = self._count_by_severity(’HIGH’)

if critical > 0:

return "CRITICAL"

elif high > 2:

return "HIGH"

elif high > 0:

return "MEDIUM"

else:

return "LOW"

def _generate_key_findings(self) -> str:
"""G´en`ere les d´ecouvertes cl´es"""

findings = []

14

Projet final

Master 1 SAS

vulns = self.results.get(’web_vulns’, []) + self.results.get(’system_vulns’,

[])

# Top 5 des vuln´erabilit´es les plus critiques
sorted_vulns = sorted(vulns,

key=lambda x: {’CRITICAL’: 4, ’HIGH’: 3,

’MEDIUM’: 2, ’LOW’: 1}.get(x.get(’severity’

, ’LOW’), 0),

reverse=True)

for i, vuln in enumerate(sorted_vulns[:5], 1):

findings.append(

f"{i}. [{vuln.get(’severity’)}] {vuln.get(’type’)} on {vuln.get(’

target’)}"
)

return ’\n’.join(findings)

def _generate_immediate_actions(self) -> str:

"""G´en`ere les actions imm´ediates requises"""

actions = []

critical_vulns = [v for v in self.results.get(’web_vulns’, []) +

self.results.get(’system_vulns’, [])
if v.get(’severity’) == ’CRITICAL’]

for vuln in critical_vulns:

actions.append(f"- Patch {vuln.get(’type’)} on {vuln.get(’target’)}")

return ’\n’.join(actions) if actions else "No critical vulnerabilities

requiring immediate action"

224

225
226
227
228
229

230
231
232
233
234

235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251

elif high > 0:

if critical > 0:

"""´Evalue l’impact sur la conformit´e"""

def _generate_compliance_assessment(self) -> str:

assessment = "Based on the vulnerabilities discovered:\n"

critical = self._count_by_severity(’CRITICAL’)
high = self._count_by_severity(’HIGH’)

assessment += "- Partial compliance issues detected\n"
assessment += "- Remediation recommended within 30 days"

assessment += "- Non-compliant with PCI-DSS, ISO 27001, GDPR\n"
assessment += "- Immediate remediation required for compliance"

252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279 <p><strong>Total Vulnerabilities:</strong> {summary[’total_vulnerabilities’]}</p>
280 <p><strong>Risk Distribution:</strong></p>
281 <ul>
282

assessment += "- No major compliance issues identified\n"
assessment += "- Regular monitoring recommended"

<li class="critical">Critical: {summary[’critical_count’]}</li>

def _generate_html_summary(self) -> str:

summary = self._generate_summary()

"""G´en`ere le r´esum´e HTML"""

return assessment

return f’’’

else:

15

Projet final

Master 1 SAS

<li class="high">High: {summary[’high_count’]}</li>
<li class="medium">Medium: {summary[’medium_count’]}</li>
<li class="low">Low: {summary[’low_count’]}</li>

283
284
285
286 </ul>
287 <p><strong>Exploitations:</strong> {summary[’exploitations_successful’]}/{summary[’

288
289
290
291
292
293

294
295

exploitations_attempted’]} successful</p>

’’’

def _generate_html_vulnerabilities(self) -> str:

"""G´en`ere le tableau HTML des vuln´erabilit´es"""

vulns = self.results.get(’web_vulns’, []) + self.results.get(’system_vulns’,

[])

html = ’<table><thead><tr><th>Severity</th><th>Type</th><th>Target</th><th>

Description</th></tr></thead><tbody>’

for vuln in vulns:

severity_class = vuln.get(’severity’, ’LOW’).lower()
html += f’’’

<td class="{severity_class}">{vuln.get(’severity’, ’UNKNOWN’)}</td>
<td>{vuln.get(’type’, ’Unknown’)}</td>
<td>{vuln.get(’target’, ’N/A’)}</td>
<td>{vuln.get(’description’, ’No description’)[:100]}...</td>

’’’

html += ’</tbody></table>’

return html

def _generate_html_exploitations(self) -> str:
"""G´en`ere le HTML des exploitations"""

exploits = self.results.get(’exploitations’, [])

html = ’<table><thead><tr><th>Type</th><th>Target</th><th>Status</th><th>PoC

</th></tr></thead><tbody>’

for exploit in exploits:

status = " Success" if exploit.get(’success’) else " Failed"
html += f’’’

<td>{exploit.get(’type’, ’Unknown’)}</td>
<td>{exploit.get(’target’, ’N/A’)}</td>
<td>{status}</td>
<td>{"Available" if exploit.get(’proof_of_concept’) else "N/A"}</td>

’’’

html += ’</tbody></table>’

return html

def _generate_html_recommendations(self) -> str:

"""G´en`ere les recommandations HTML"""

recommendations = [

"Implement input validation and output encoding",
"Apply security patches to all systems",
"Enable Web Application Firewall (WAF)",
"Conduct regular security assessments",

16

296
297
298
299
300 <tr>
301
302
303
304
305 </tr>
306
307
308
309
310
311
312
313
314
315
316
317

318
319
320
321
322 <tr>
323
324
325
326
327 </tr>
328
329
330
331
332
333
334
335
336
337
338
339
340
341

Projet final

Master 1 SAS

342
343
344
345
346
347
348
349
350
351
352
353

"Implement security awareness training",
"Enable security logging and monitoring"

]

html = ’<ul>’

for rec in recommendations:

html += f’<li>{rec}</li>’

html += ’</ul>’

return html

1.8 Tests unitaires et validation

1.8.1 Framework de tests

Le projet doit inclure une suite de tests compl`ete :

def test_dns_enumeration(self):

def test_subdomain_discovery(self):

"""Tests pour le module de reconnaissance"""

"""Test de la d´ecouverte de sous-domaines"""
# Test avec un domaine connu
pass

"""Test de l’´enum´eration DNS"""
pass

1 #!/usr/bin/env python3
2 """
3 Suite de tests unitaires pour le framework
4 """
5 import unittest
6 from modules.reconnaissance import osint
7 from modules.network import scanner
8 from modules.web import vulnerability_scanner
9
10 class TestReconnaissanceModule(unittest.TestCase):
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26 class TestNetworkModule(unittest.TestCase):
"""Tests pour le module r´eseau"""
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41 class TestWebModule(unittest.TestCase):
"""Tests pour le module web"""
42
43
44

"""Test de la d´etection de services"""
pass

"""Test de la collecte OSINT"""
pass

"""Test du fingerprinting OS"""
pass

"""Test du scan de ports"""
pass

def test_osint_data_collection(self):

def test_service_detection(self):

def test_os_fingerprinting(self):

def test_port_scanning(self):

def test_web_crawling(self):

17

Projet final

Master 1 SAS

def test_sql_injection_detection(self):

"""Test de d´etection SQL injection"""
pass

def test_xss_detection(self):

"""Test du crawling web"""
pass

"""Test de d´etection XSS"""
pass

45
46
47
48
49
50
51
52
53
54
55
56 class TestIntegration(unittest.TestCase):
57
58
59
60
61
62
63
64
65
66
67 if __name__ == ’__main__’:
unittest.main()
68

"""Test du pipeline complet"""
pass

def test_report_generation(self):

def test_full_pipeline(self):

"""Tests d’int´egration"""

"""Test de g´en´eration de rapports"""
pass

1.9 Documentation technique

1.9.1 Structure de la documentation

Le projet doit inclure une documentation compl`ete :

— README.md : Vue d’ensemble, installation, quick start

— INSTALLATION.md : Guide d’installation d´etaill´e

— USER GUIDE.md : Guide utilisateur avec exemples

— API REFERENCE.md : Documentation de l’API

— CONTRIBUTING.md : Guide de contribution

— CHANGELOG.md : Historique des versions

1.9.2 Exemple de README.md

# Penetration Testing Framework

Framework modulaire de test d’intrusion d´evelopp´e en Python.

## Fonctionnalit´es

- **Reconnaissance** : OSINT, DNS, sous-domaines
- **Scan r´eseau** : Ports, services, OS
- **Scan web** : Crawling, d´etection de vuln´erabilit´es
- **Exploitation** : Automatisation web et syst`eme
- **Reporting** : JSON, HTML, PDF

## Installation
‘‘‘bash
# Cloner le d´epˆot
git clone https://github.com/username/pentest-framework.git

18

Projet final

Master 1 SAS

cd pentest-framework

# Installer les d´ependances
pip install -r requirements.txt

# Configuration
cp config.example.json config.json

# Scan complet
python main.py scan --target example.com --full

# Reconnaissance uniquement
python main.py recon --target example.com

# G´en´eration de rapport
python main.py report --session-id <session_id>

Architecture

framework/
|---- core/
|---- modules/
|---- utils/
`---- reporting/

# Modules core
# Modules fonctionnels
# Utilitaires

# G´en´eration de rapports

Documentation
Voir le dossier docs/ pour la documentation compl`ete.

License
MIT License - Voir LICENSE pour d´etails

Avertissement
USAGE ´EDUCATIF UNIQUEMENT
Ce framework est destin´e uniquement `a des fins ´educatives
et de tests autoris´es. Tout usage malveillant est interdit.

2 Crit`eres d’´evaluation

2.1 Grille d’´evaluation d´etaill´ee

2.2 Crit`eres de bonus

Des points bonus peuvent ˆetre attribu´es pour :

— D´emonstration vid´eo (+2 pts) : Vid´eo de d´emonstration professionnelle

— Interface graphique (+3 pts) : GUI en plus du CLI

— Tests avanc´es (+2 pts) : Couverture de tests > 80

— CI/CD (+1 pt) : Pipeline d’int´egration continue

— Containerisation (+1 pt) : Docker/Docker-compose

— Documentation avanc´ee (+1 pt) : Wiki ou documentation web

19

Projet final

Master 1 SAS

Crit`ere

Points D´etails

Qualit´e technique du code (40%)

Architecture
Qualit´e du code
Gestion d’erreurs
Performance
S´ecurit´e

Reconnaissance
Scan r´eseau
Scan web
Exploitation
Reporting

Lisibilit´e, conventions PEP8, docstrings
Try-catch, logging, r´ecup´eration

8 pts Modularit´e, s´eparation des responsabilit´es
8 pts
8 pts
8 pts Multi-threading, optimisations
8 pts

Validation entr´ees, sanitization, logging

Fonctionnalit´es impl´ement´ees (25%)

OSINT, DNS, sous-domaines complets
Ports, services, OS fonctionnels
Crawling et d´etection vuln´erabilit´es

5 pts
5 pts
5 pts
5 pts Web et syst`eme impl´ement´es
5 pts Multi-formats, complets et clairs

Documentation et rapport (20%)

Rapport technique
Documentation code
Commentaires

10 pts
5 pts
5 pts

Structure respect´ee, complet (15-20 pages)
README, guides, API reference
Code bien comment´e, docstrings

Fonctionnalit´es avanc´ees
Interface utilisateur
Cr´eativit´e

Total g´en´eral

Innovation et originalit´e (15%)

8 pts
4 pts
3 pts

Features au-del`a des exigences
CLI&IHM intuitive, ergonomique
Solutions originales, optimisations
TOTAL
100 pts Ramen´e sur 20

TABLE 3 – Grille d’´evaluation d´etaill´ee du projet

2.3 P´enalit´es

Des p´enalit´es seront appliqu´ees pour :

— Retard de livraison : -2 points par jour de retard

— Code non fonctionnel : -10 points si le framework ne s’ex´ecute pas

— Plagiat d´etect´e : 0/20 + sanctions disciplinaires

— Documentation manquante : -5 points

— Tests absents : -3 points

3 Modalit´es de soutenance

3.1 D´eroulement de la soutenance

3.1.1 Format de pr´esentation

— Dur´ee totale : 30 minutes

— Pr´esentation : 20 minutes

— Questions : 10 minutes

— Support : Pr´esentation PowerPoint/PDF obligatoire

— D´emonstration : Live demo du framework (5-7 minutes)

20

