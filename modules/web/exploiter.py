"""
modules/web/exploiter.py
Safe PoC helpers for web forms. Designed for educational/demo use on authorized targets.
Functions:
 - generate_poc_for_form(form, payload) -> returns dict describing the PoC
 - submit_poc(url, form_action, params, method='get', session=None) -> submits and returns response summary
"""
import requests
from urllib.parse import urljoin

def generate_poc_for_form(page_url, form_details, payload="<xsstest>"):
    """
    form_details: dict with keys 'action', 'method', 'inputs' (names)
    Returns a plan dict (not executed).
    """
    action = form_details.get("action") or page_url
    method = form_details.get("method", "get").lower()
    inputs = form_details.get("inputs", []) or []
    data = {}
    for name in inputs:
        # put the payload into the first input, rest get 'test'
        data[name] = payload if inputs.index(name) == 0 else "test"
    return {
        "page": page_url,
        "action": action,
        "method": method,
        "params": data,
        "note": "Safe PoC: this will submit controlled non-malicious payload to test reflection"
    }

def submit_poc(base_url, form_details, payload="<xsstest>", session=None, timeout=5):
    """
    Submits the PoC and returns a dict summary: status_code, reflected (bool), snippet.
    Only use on authorized targets.
    """
    s = session or requests.Session()
    plan = generate_poc_for_form(base_url, form_details, payload=payload)
    action = plan["action"]
    if not action.startswith("http"):
        action = urljoin(base_url, action)
    try:
        if plan["method"] == "post":
            r = s.post(action, data=plan["params"], timeout=timeout)
        else:
            r = s.get(action, params=plan["params"], timeout=timeout)
        text = r.text or ""
        reflected = payload in text
        snippet = text[:800]
        return {"status_code": r.status_code, "reflected": reflected, "snippet": snippet}
    except Exception as e:
        return {"error": str(e)}
